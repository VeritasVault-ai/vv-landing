"use client"

import React from "react"
import { Badge } from "@/components/ui/badge"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Sparkles, AlertCircle, Info } from "lucide-react"
import { cn } from "@/lib/utils"

export type AIBadgeType = 
  | "generated" // Content fully generated by AI
  | "assisted" // Content created with AI assistance
  | "analyzed" // Content analyzed by AI
  | "experimental" // Experimental AI feature

interface AIBadgeProps {
  type: AIBadgeType
  className?: string
  showTooltip?: boolean
  tooltipPosition?: "top" | "bottom" | "left" | "right"
  tooltipContent?: string
}

/**
 * A badge component that indicates AI-generated or AI-assisted content
 * for transparency and compliance with AI guidelines
 */
export function AIBadge({
  type,
  className,
  showTooltip = true,
  tooltipPosition = "top",
  tooltipContent
}: AIBadgeProps) {
  const badgeContent = {
    generated: {
      icon: <Sparkles className="h-3 w-3 mr-1" />,
      text: "AI Generated",
      variant: "secondary" as const,
      defaultTooltip: "This content was generated by artificial intelligence"
    },
    assisted: {
      icon: <Sparkles className="h-3 w-3 mr-1" />,
      text: "AI Assisted",
      variant: "outline" as const,
      defaultTooltip: "This content was created with AI assistance"
    },
    analyzed: {
      icon: <Info className="h-3 w-3 mr-1" />,
      text: "AI Analyzed",
      variant: "outline" as const,
      defaultTooltip: "This content was analyzed by artificial intelligence"
    },
    experimental: {
      icon: <AlertCircle className="h-3 w-3 mr-1" />,
      text: "Experimental AI",
      variant: "destructive" as const,
      defaultTooltip: "This is an experimental AI feature and may not be fully accurate"
    }
  }

  const content = badgeContent[type]
  const tooltip = tooltipContent || content.defaultTooltip

  const badge = (
    <Badge 
      variant={content.variant} 
      className={cn(
        "text-xs flex items-center whitespace-nowrap", 
        type === "generated" && "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
        className
      )}
    >
      {content.icon}
      <span>{content.text}</span>
    </Badge>
  )

  if (!showTooltip) {
    return badge
  }

  return (
    <TooltipProvider>
      <Tooltip delayDuration={300}>
        <TooltipTrigger asChild>
          {badge}
        </TooltipTrigger>
        <TooltipContent side={tooltipPosition}>
          <p>{tooltip}</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
}